Plotting of benchmarks
======================

After generating a csv file with ``mdbenchmark analyze`` you can plot the results
using the plot subcommand::

  mdbenchmark plot

.. note::
   Make sure you wrote a file using ``mdbenchmark analyze`` with the
   ``--save-csv`` flag. Previous versions automatically generated this file. This is
   no longer the default behavior.

In the following we describe how you can use the options for mdbenchmark plot.
An input using ``--csv``  will always be required.

Further descriptions can be found when calling::

   mdbenchmark plot --help

Plotting a single CSV
---------------------

When calling MDBenchmark with a csv both all data contained in the csv file will be
plotted irrespect of GPU or CPU data.
MDBenchmark will discern individual runs for you. If you prepared your data with
``mdbenchmark analyze`` you should be able to run::

   mdbenchmark plot --csv data.csv


Plotting multiple CSV files
---------------------------

MDBenchmark also offers the option to plot multiple csv files in one plot.
To do this simply specify the ``--csv`` option multiple times.::

   mdbenchmark plot --csv data1.csv --csv data2.csv

MDBenchmark will plot all available data from the runs detailed in these ``.csv`` files
in one plot. These can further be filterd using the filtering options detailed below.
These are applied to the data in all csv files collectively.

Filtering selections
--------------------

To filter your data from one or multiple ``.csv`` files you can use several commands.
There are many options to combine these functionalites to achieve the plots you like.
This can be useful to compare or highlight specific performance.

CPU/GPU filtering
~~~~~~~~~~~~~~~~~

By default both GPU and CPU data will be plotted. Either can be excluded using either::

   mdbenchmark plot --no-gpu

or::

   mdbenchmark plot --no-cpu

This way data can be filtered for this tag in the ``.csv`` file. This flag can be combined
with any further


Module and Template filtering
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You might only want to compare data for one specific cluster or a specific MD engine
or settings for a template which you defined yourself to compare how changes in
calling your MD engine might impact performance.

.. note::
   Both ``--template`` and ``--host`` may be used interchangeably. With this nomenclature
   we want to point out that one might either want to plot data from different clusters
   which are different hosts or potentially runs with different custom templates from the same cluster.
   Templates would then only differ from each other in the detailed run setting and may be added by hand.

These flags can be invoked any number of times to either select a specific number of modules
or templates/hosts or a subset of these::

   mdbenchmark plot --module gromacs/2018.2 --module gromacs/2016.4

This selection plots all data with GPU and CPU of the two modules ``gromacs/2018.2``
and ``gromacs/2016.4`` which are present in any input ``.csv`` files.

Another example of usage where a number of templates are compared. Assuming we want to compare
the performance of ``namd/12`` with ``gromacs/2016.4`` on CPUs only running on the cluster draco
we would invoke the following options on our input ``.csv``::

   mdbenchmark plot --module namd/12 --module gromacs/2016.4 --no-gpu --template draco

Changing axis labels from nodes to cores
----------------------------------------

To change the label for the x-axis which by default shows the number of nodes you can use::

   mdbenchmark plot --plot-cores

This changes the label to number of cores specified in the csv file. If inhomogeneous
cluster types are used this can lead to issues.


Output options and file formats
-------------------------------

You can set the output name for the generate plot using the ``--ouput-name`` flag.
By default mdbenchmark will use a datetime string to label to name your file. This ensures
that no older data is accidentally overwritten.
The custom name is given by envoking::

   mdbenchmark plot --output-name plot_file

You can set a filetype here or specify it using a flag.
``--output-format`` supports the formats ``png, pdf, svg, ps`` as which you can save
the generated plot.

   mdbenchmark plot --output-format png

As noted the above flags can all be used in any combination to generate custom plot combination.
The reader expects ``.csv`` files which are formatted such that they reflect the output
as it is generated by ``mdbenchmark analyze``.


.. note::
   In older versions plotting was achieved by using `mdbenchmark analyze --plot``.
   This feature is deprecated and will be discontinued in newer versions.
   Moreover, this older version is also limited in terms of functionality.
