import os
import subprocess
import sys
from glob import glob

import click
import mdsynthesis as mds

from .cli import cli
from .util import cleanup_before_restart

PATHS = os.environ['PATH'].split(':')
BATCH_SYSTEMS = {'slurm': 'sbatch', 'sge': 'qsub', 'Loadleveler': 'llsubmit'}


def get_engine_command():
    for p in PATHS:
        for b in BATCH_SYSTEMS.values():
            if glob(os.path.join(p, b)):
                return b
    raise click.UsageError(
        'Was not able to find a batch system. Are you trying to use this '
        'package on a host with a queuing system?')


@cli.command()
@click.option(
    '-d', '--directory', help='directory to search benchmarks in', default='.')
@click.option(
    '-f',
    '--force',
    'force_restart',
    help='force restart of all benchmark systems',
    is_flag=True)
def start(directory, force_restart):
    """Start benchmark simulations found in recursive search of `top_folder`.

    This method checks whether benchmark folders were generated beforehand,
    exits otherwise.
    Only runs benchmarks that were not already started. Can be overwritten.
    """
    bundle = mds.discover(directory)

    # Exit if no bundles were found in the current directory.
    if not bundle:
        click.echo('No benchmark systems found to run. Exiting.')
        sys.exit(0)

    grouped_bundles = bundle.categories.groupby('started')
    try:
        bundles_not_yet_started = grouped_bundles[False]
    except KeyError:
        bundles_not_yet_started = None

    if not bundles_not_yet_started and not restart:
        click.echo(
            'All benchmark systems were already run. You can force a restart.')
        sys.exit(0)

    # Start all benchmark simulations if a restart was requested. Otherwise
    # only start the ones that were not run yet.
    bundles_to_start = bundle
    if not force_restart:
        bundles_to_start = bundles_not_yet_started

    engine_cmd = get_engine_command()
    click.echo('Will start a total of {} benchmark systems.'.format(
        click.style(str(len(bundles_to_start)), bold=True)))

    for b in bundles_to_start:
        # Remove files generated by previous benchmark run
        if force_restart:
            cleanup_before_restart(b)

        b.categories['started'] = True
        os.chdir(b.abspath)
        subprocess.call([engine_cmd, 'bench.job'])
